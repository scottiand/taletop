using System;
using Xamarin.Forms;
namespace FableDevice.Models
{
    public static class RuleBook
    {
        public static RulePage ruleBook { get; set; }
        private static string name = (string)Application.Current.Resources["appName"];
        public static string wil = (string)Application.Current.Resources["wil"];
        public static string str = (string)Application.Current.Resources["str"];
        public static string dex = (string)Application.Current.Resources["dex"];
        public static string wis = (string)Application.Current.Resources["wis"];
        public static string cha = (string)Application.Current.Resources["cha"];
		private static string wilDesc = (string)Application.Current.Resources["wilDesc"];
		private static string strDesc = (string)Application.Current.Resources["strDesc"];
		private static string dexDesc = (string)Application.Current.Resources["dexDesc"];
		private static string wisDesc = (string)Application.Current.Resources["wisDesc"];
		private static string chaDesc = (string)Application.Current.Resources["chaDesc"];

        public static void initializeRuleBook() {
            ruleBook = new RulePage("Tale-Top", "\tTale-Top is Tabletop Roleplaying Game for 2-6 players. It is a collaborative storytelling experience where the characters and events are developed through play. One player takes on a role called the Game Master. The Game Master builds the setting and Conflicts, makes judgments, and guides the story and characters forward. The rest of the players each take on a role as a Character. The Characters form a group who must come together to overcome the challenges presented by the Game Master.");
            ///// ///// ///// ///// PLAYING THE GAME
            RulePage playingTheGame = new RulePage("Playing a Character","\tWhen you play Tale-Top in the Character role, you will invent a character and build them using the Character Creator. Gameplay will consist of describing your character’s actions as well as speaking for your character. Some actions will require die rolls to determine whether or not they succeed, and the final results of all actions are determined by the Game Master.");
            ///// ///// ///// Creating a Character
            RulePage creatingACharacter = new RulePage("Character Creation", "\tTo access the Character Creator, select ‘Player Character’ from the title screen. Then, from the Character Selection screen tap the ‘New Character’ button at the top." +
                                                      "\n\tBefore you begin, your Game Master will provide some background for the game and some basic guidelines for your character. For example, a game in a corporate setting might require all characters to be employees of the same company. This helps insure that the characters all make sense in the context of the story.");
            ///// ///// Survey
            RulePage survey = new RulePage("Character Survey", "\tOnce you have a basic idea of the character you want to play, you can begin the Character Survey. The Character Survey will present you with 15 statements that may or might not represent your character. For each question you can select the degree to which that statement fits, ranging from Strongly Disagree to Strongly Agree. The answers will be used to generate your character’s Stats. The Stats are a numeric representation of your character’s mental and physical aptitude.");
            ///// ///// Stats
            RulePage stats = new RulePage("Stats", "\tYour Stats, generated by the survey portion of the Character Creator, represent your character’s prowess numerically. Each character has five Stats: " + str + ", " + dex + ", " + wis + ", " + cha + ", and " + wil + "." +
                                          "\n\t" + str + ", indicated by the color red, " + strDesc + 
                                          "\n\t" + dex + ", indicated by the color green, " + dexDesc + 
                                          "\n\t" + wis + ", indicated by the color blue, " + wisDesc + 
                                          "\n\t" + cha + ", indicated by the color yellow, " + chaDesc + 
                                          "\n\t" + wil + ", indicated by the color magenta, " + wilDesc);
            ///// ///// Backgrounds
            RulePage backgrounds = new RulePage("Background", "\tChoosing a background will help define your character’s history and occupation. When you select a Background, you will be taken to a page that will give you a series of choices about Abilities, Items, and Stats. Choose the options best the character you are trying to create." +
                                               "\n\tThere may be some cases when the backgrounds don’t quite fit the situation. A common example is when you are playing as students or children. Try to a find a background that gives your character Items, Skills, and an Ability that make sense for them, even if the background doesn’t quite fit. For playing a student, you may choose a background to represent area of study or hobby as opposed to occupation.");
            ///// ///// Details
            RulePage details = new RulePage("Details", "Your character’s details don’t affect the gameplay, and are completely optional. Details allows you input information such as you age and height, as well a description and personality. You can fill in as many or as few of these as you want. You can edit your details by tapping ‘Self’ on the navigation bar from the Main Gameplay screen, and choosing ‘Details’.");
            ///// ///// Name

            creatingACharacter.Add(survey);
            creatingACharacter.Add(stats);
            creatingACharacter.Add(backgrounds);
            creatingACharacter.Add(details);
            ///// ///// ///// Gameplay
            RulePage playerGameplay = new RulePage("Gameplay", "");
            ///// ///// Main Gameplay Page
            RulePage mainGameplayPage = new RulePageScreenshot("Main Gameplay Page", "\tAs a player, the Main Gameplay Screen will act as a hub. From here you can access information about your character, view your skills and items, manage conditions, add or subtract Willpower, and view your stats.",
                                                               "FableDevice.Images.screenshotPlayer.png", "\tAt the top of the screen is your character’s name. Just below that on the right is your current and max Willpower. This can be adjusted by tapping the ‘+’ and ‘-’ buttons. Next to your Willpower is the Conditions button. The number represents how many conditions you currently have. Tapping on this button will bring you to a list of your current conditions that allows you to view, add, and remove conditions when necessary." +
                                                                "\n\tThe colored buttons on the bottom half of the screen are your Stats. Tapping on these will bring you to a Stat Bonus screen where you can add skills and items and roll the digital die." +
                                                               "\n\tThe gray navigation bar on the bottom of the screen gives you access to other useful pages. Tap ‘Self’ on the navigation bar to access your inventory, skills, and details. Tap ‘Notes’ to record information you may need to reference later. Tap ‘Die’ to roll a digital twelve sided die. Tap ‘Rules’ to view the Rulebook at any time. Tap ‘Exit’ to return to the Main Menu.");
            ///// ///// Stat Checks
            RulePage playerStatChecks = new RulePage("Stat Checks", "\tWhen attempting any task with a reasonable chance of failure, your Game Master may require you to make a Stat Check. The Game Master will let you know which Stat you should use. Tapping on a Stat from the Main Gameplay screen will bring you to the Stat Bonus screen. The large number at the top is your Stat, with any modifiers accounted for. (See modifiers below)" +
                                                    "\n\tTo perform a Stat Check, roll a twelve-sided (or tap Roll For Me for the digital die). If the roll less than your Stat, you are successful. If the total is greater than your Stat, you fail. The Game Master will determine the specific results of successes and failures. Sometimes, a success may refer to progress towards completing the task you were attempting, rather than outright completion." +
                                                    "\n\tIf you roll a one, this is a Great Success, and will yield better results. Roll a twelve however, and this is an Utter Failure. (Twelve is ALWAYS an utter failure, even if it would otherwise be a Partial Success or Success) If your roll is equal to your Stat, you have rolled a Partial Success. A Partial Success results in success at a cost or no change, as determined by the Game Master.");
            ///// Modifiers
            RulePage playerModifiers = new RulePage("Modifiers", "\tSome Abilities and Conditions will modify your Stat. If your Stat is modified, you can use the - and + buttons on the Stat screen to adjust the Stat accordingly. This modifier cannot be less than -3 or greater than +3. Modifiers can also be granted by the Game Master if the circumstances suggest a clear advantage or disadvantage. Your Stat can also be modified by Items and Skills.");
            ///// Items 
            RulePage playerItemsSkillCheck = new RulePage("Items", "\tFrom the Stat screen, you can tap the Item button to add an Item to your Stat Check. Ask your Game Master if a particular Item can be used to be used for a Check. If necessary, you can describe how you will use that Item to increase your chance of success. You can only add one Item at a time." +
                                                         "\n\tSome Items have a limited number of uses. If an Item has 0 uses, it cannot be used for a Stat Check. If you use a limited Item for a Stat Check and are not using the digital dice, you must manually remove a use from the Item by tapping on it from it the Inventory.");
            ///// Skills
            RulePage playerSkills = new RulePage("Skills", "\tSkills represent specific talents your character has. Ask your Game Master if a particular skill applies to a specific Stat Check. If necessary, you can describe how you will use that Skill to increase your chance of success. To add a Skill to a Stat Check, tap the Skill button on the Stat screen and tap the skill you want to add. You can only add one Skill at a time.");
            ///// Abilities
            RulePage playerAbilities = new RulePage("Abilities", "\tEach character has one special Ability from their Background. Each Ability is unique, so read the description to understand how it works. Your Ability can be found by tapping the Skills button at the bottom of the Main Gameplay screen. If an Ability requires you to make a Stat Check, that Check does not act like a regular Stat Check. That is to say, when you make a Stat Check for an ability, you are not affected by the consequences for failure or benefits of success received from a regular Stat Check. When making an Ability Stat Check, count a Success, Great Success, or Partial Success as Success and anything else as failure.");

            playerStatChecks.Add(playerModifiers);
            playerStatChecks.Add(playerItemsSkillCheck);
            playerStatChecks.Add(playerSkills);
            playerStatChecks.Add(playerAbilities);
            ///// ///// Conflict 
            RulePage playerConflict = new RulePage("Conflict", "\tConflict refers to gameplay segments when the characters must face off against an opposing force. Conflicts Escalate as they unfold, leading into greater Risk for the characters. In a Conflict the players have an Objective they are attempting to complete. Meanwhile, they must manage their Willpower and the Escalation of the Conflict. A Conflict ends when the players complete their Objective, the players surrender, or all players have 0 Willpower. On your turn, you may attempt to increase the Objective Completion, decrease the Conflict’s Escalation, use an Ability, or Surrender.");
            ///// Objective
            RulePage playerObjective = new RulePage("Objective", "\tA Conflict’s Objective is the players’ goal in a Conflict. The Objective could be, for example, getting through a locked door, persuading someone to give information, or escaping a pursuer. When characters succeed at Stat Checks made to help complete the Objective, they can increase the Objective Completion. Objective Completion is a number that the Game Master tracks. It represents how close the Objective is to being accomplished. More difficult tasks requires more Objective Completion. When characters fail, they have the potential to subtract Objective Completion.");
            ///// Risk and Escalation
            RulePage playerRisk = new RulePage("Risk and Escalation", "\tDuring a Conflict, your Game Master will tell you the level of Risk. The level of Risk represents the potential danger the characters face. Risk 0 refers to the time spent outside of conflict. Risk 4 is highest level of Risk." +
                                              "\n\tOver time, the Conflict’s Escalation will rise. Escalation is a number that the Game Master tracks in secret. When it reaches certain milestones, the level of Risk will increase by one. The Game Master will announce when the Risk has increased. Once a Conflict’s Risk has been Escalated, it’s level of Risk cannot go down until the Conflict has ended entirely." +
                                              "\n\tNote: If at any time a character uses any form of physical violence, the Risk is automatically Escalated to the 2nd Level if it is not already Level 2 or higher.");
            ///// Surrender
            RulePage playerSurrender = new RulePage("Surrender", "\tIf you no longer think completing the Objective is worth the Risk during a Conflict, you can choose to Surrender. Once you have surrendered, you can longer participate in the current conflict. If all players Surrender (whether by choice or by being reduced to 0 Willpower), the Conflict ends and the Objective is not completed. There may be additional consequences for Surrender depending on the circumstances at the discretion of the Game Master.");

            playerConflict.Add(playerObjective);
            playerConflict.Add(playerRisk);
            playerConflict.Add(playerSurrender);

            ///// ///// Inventory
            RulePage inventory = new RulePage("Inventory", "\tTo view or manage your Inventory, tap ‘Self’ and select ‘Items’ on the Main Gameplay screen. From here you can tap on items to use them. You can also add new Items by hitting Add on the top of the screen. Additionally, Items can be removed or edited. ‘Edit’ allows you to add or remove uses from a limited item, as well as change the name or description of an item to personalize it. For example, a character who is a painter may change the name of their item ‘Artist’s Implements’ to ‘Paints and Brushes.’");

            ///// ///// Conditions
            RulePage playerConditions = new RulePage("Conditions", "\tConditions are negative consequences from failure in Conflict that will make it more difficult for your character to progress. There are three levels of severity for Conditions: minor, major, and critical. Minor conditions are setbacks, but can be relieved by certain player Abilities and Items. Major conditions will make certain actions significantly more difficult, and are permanent. Critical conditions are extremely debilitating, and can even lead to death. Critical Conditions can only be given when the Risk is at 4." +
                                                    "\n\tTo view or add Conditions, tap on the Conditions Button from the Main Gameplay screen. It is located on the left side of the screen next to your Current Willpower, and is labeled ‘Conditions’. The number lets you know how many Conditions you currently have. On the Conditions screen, you can tap on a Condition to see its details and have the option to remove it. Tap the ‘Add Condition’ button to add a new Condition. You will see a list of all the possible Conditions. Tap on a Condition and tap Select to add it."); 
            playerGameplay.Add(mainGameplayPage);
            playerGameplay.Add(playerStatChecks);
            playerGameplay.Add(playerConflict);
            playerGameplay.Add(inventory);
            playerGameplay.Add(playerConditions);
            ///// ///// ///// Roleplaying
            RulePage roleplaying = new RulePage("Roleplaying", "\tAs you play Tale-Top, remember that you are playing a character. When you act, think not only about what will accomplish the task, but also what your character would do. When you create your character, try and think about their fears, desires, and motivations. What are their priorities? Who do they love? What can they not live without? You may not have answers to all these questions. That’s okay, they are just to get you thinking. They more you understand about your character, the easier it will be to take on that role." +
                                               "\n\tSome Players and Game Masters like to talk in Character. This can really help develop a Character’s personality, as well as explore the relationships between Characters. If you’re uncomfortable talking as your Character, it is also okay to simply describe what their saying. Before starting a game, especially with a new group, it is a good idea to briefly discuss the level of roleplay the group expects, and what everyone is comfortable with." +
                                               "\n\tIf the Game Master chooses, they can allow you to substitute certain Stat Checks for roleplay. Most often, this will happen in conversation. Depending on what your Character says, the Game Master may allow you to Succeed with rolling, or determine that you’ve Failed. Even when substituting in roleplay, the Game Master may still require rolls here and there. For example, if you try to lie while talking to someone, the Game Master may require you to roll to see if the lie was convincing.");

			playingTheGame.Add(creatingACharacter);
            playingTheGame.Add(playerGameplay);
            playingTheGame.Add(roleplaying);
			///// ///// ///// ///// RUNNING THE GAME
			RulePage runningTheGame = new RulePage("Playing the Game Master",
												   "\tThe Game Master takes on the role of the friends, enemies, environments, and challenges with which the Player Characters interact. They also act as an interpreter of characters' actions, and and as a guiding force of the plot and action. As game master, it is your goal to craft an experience that feels both engaging and fair for the players.");
            ///// ///// ///// Basics
            RulePage gmBasics = new RulePage("Game Master Basics", "\tAs Game Master, your primary goal is to translate concepts between the rules of the game and and the events in the story. This includes taking the Players’ actions and deciding which Stat Check they should make, as well as taking your rules as the Game Master and describing them to your Players as events in the game world. It is important to try your best to make the game fair to all players, and not favor certain Players over others.");
            ///// ///// Game Master Screen
            RulePage gmScreen = new RulePageScreenshot("Game Master Screen",
                                                       "\tThe Game Master Screen acts as a guide for resolving Stat Checks and managing Conflict.",
                                                       "FableDevice.Images.screenshot.png",
                                                       "\tThe box on top contains the result guidelines. This box contains a bulleted list of possible outcomes for a Player’s roll given the current level of risk. In the pictured example, you can see the guidelines for a Failure while the Risk is level two. You should choose the single result that best fits the current situation." +
                                                      "\n\tThe button below the result guidelines is used to end an ongoing Conflict, or start a new Conflict if there is no Conflict happening." +
                                                      "\n\tBelow the Conflict button is the Objective Completion bar. Use the ‘+’ and ‘-’ buttons to add or subtract Objective Completion when necessary. Objective completion cannot go below 0. If the Objective Completion bar fills up, the Conflict is over. The ‘+10’ and ‘-10’ buttons are shortcuts for dealing with large changes in objective completion." +
                                                      "\n\tNext is the Escalation bar and Level of Risk. When not in Conflict, the Risk will be Level 0. As soon as a Conflict begins, the Risk becomes Level 1. Use the ‘+’ and ‘-’ buttons to add or subtract Escalation when necessary. Escalation cannot go below 0. When the Escalation bar fills up, the Level of Risk goes up by one, to a maximum of four. Each time the Level of Risk goes up, the contents of the result guidelines box changes to reflect the greater Risk." +
                                                      "\n\tThe buttons along the button are used to toggle the result guidelines to show different levels of success or failure. Each button corresponds to a possible outcome of a Stat Check: ‘UF’ (Utter Failure), ‘F’ (Failure), ‘PS’ (Partial Success), ‘S’ (Success), and ‘GS’ (Great Success). When a Player makes a Stat Check, they will report their outcome to you. Tap the corresponding button and choose an outcome from the result guidelines." +
                                                      "\n\tStat Checks, Conflict, Objective Completion, Risk, and Escalation are all covered in more detail in their respective sections.");

            gmBasics.Add(gmScreen);
            ///// ///// ///// Setup
            RulePage setup = new RulePage("Setup", "\tThe amount of setup required for being Game Master can vary greatly depending on the type of game you want to play and your ability to improvise. As you play, you’ll get a sense for how much preparation works for your playstyle. Some kinds of stories, like mysteries, tend to require more planning. If you want a quick start, or need inspiration, you can use a built-in prompt to guide your game.");
            ///// ///// Using Built-In Prompts
            RulePage builtIn = new RulePage("Using Built-In Prompts","\tBuilt-in prompts are still a work in progress. Until then, here are some ideas to help you make some games from scratch:" + 
                                           "\n  ◉  The players are working at the petting zoo at the county fair when three goats escape" +
                                           "\n  ◉  The players are lost in the wilderness and need to find a way to be rescued" +
                                           "\n  ◉  The players are reporters trying to uncover a cover-up by a large corporation" +
                                           "\n  ◉  The players are professional thieves pulling off a heist" +
                                           "\n  ◉  The players’ car breaks down in a creepy town, and they need to find new parts to fix it" +
                                           "\n  ◉  The players are preparing for a play, but the lead actor is missing" +
                                           "\n  ◉  The players are investigators trying to get to the bottom of a murder case");
            ///// ///// Starting from Scratch
            RulePage fromScratch = new RulePage("Working from Scratch", "\tStarting a game from scratch from scratch can be difficult, especially if you’re playing for the first time. These guidelines can help structure your ideas within the game setting." +
                                               "\n\tIt is important to choose a situation that will inspire conflict and engage both the players and their characters. Create a clear and important objective for the characters to complete, and let the players know what this objective is before they create their characters, so they can create characters who are motivated to complete the objective. For example, you might decide that the objective is to collect some lost goats at the county fair. You might tell your players, “Each of your characters has a job at the county fair working with animals, and they have a strong need to keep that job.” When the game starts, make sure the players know that missing goats could cost them their jobs. This will ensure all of the characters are motivated to complete the objective." + 
                                               "\n\tIt is not necessary to prepare anything beforehand, but it can be useful if you are uncomfortable coming up with things on the spot. Things you might prepare include names and personalities of the people your characters could meet, a rough layout of the location, and some basic plot points or moments of conflict. Try not to over-prepare, the players may have completely different ideas about how to solve the problems you put forth, and the game can end up quite different from your plan." +
                                               "\n\tWhether you’re planning ahead or improvising, it is good to aim for a simple narrative structure. The challenges and stakes should increase over time, until a climactic moment, and finally some resolution. A good way to go about this is to use the rule of three. Choose three specific tasks that the players must complete in order to win. Using the goat example from before, you could decide that each goat has ran off to a different part of the fair. Each task should be represented by a Conflict. The more important and later in the game a Conflict is, the more difficult it should be. For a shorter game, make the first task a Medium Conflict, the second task a Hard Conflict and the final task an Extra Hard Conflict, then scatter a few easy Conflicts in between where they seem fitting. For a longer game, make the first two tasks Hard Conflicts and the last task an Extra Hard Conflict, with Easy and Medium Conflicts in the middle." +
                                               "\n\tAs you and you players get more experience playing, it will become easier to play with the rules and structure to make games more unique and interesting, but this provides a quick and easy structure for a satisfying experience.");

            setup.Add(fromScratch);
            setup.Add(builtIn);
            ///// ///// ///// Character Creation
            RulePage gmCharacters = new RulePage("Character Creation", "\tWhen your players open the Character Creator, they will be prompted to wait for direction from the Game Master. You should provide them with a brief guideline to build upon when they create their characters. For example, perhaps your game is going to be horror themed, and you’re setting it in an isolated hotel. You might tell your Players that they are playing a group of friends who are on a road trip together. This provides a basis for character relationships, and ensures the characters have a reason and desire to work together. Alternatively, you might simply tell them that their characters must each have some reason to be stranded at a hotel, and let them work from there. This approach makes it easier to have characters with diverse backgrounds, ages, and Charisma groups, but will make it more difficult to bring them together. Choose whatever guidelines you think will inspire the most engaging game for the Players. If you are working from a built-in prompt, the character guidelines will be given to you.");
            ///// ///// ///// Ability Checks
            RulePage gmStatChecks = new RulePage("Stat Checks", "\tThe Stat Check is the core gameplay function of Tale-Top. When a player wants to take some action, you must determine if the action is a simple action that they can perform without risk of failure, like opening of doors or saying “Hello” to  a friendly salesperson, or if it is a difficult task that they may fail, like breaking down a locked door, or convincing a salesperson to give a discount. If you decide the action is a difficult one, tell the player to make a Stat Check, and let them know which Stat to use. (Athletics, Expertise, Intellect, or Charisma) They will roll their die and let you know if they succeed or fail. You must decide what the effect of their roll is. Players may ask if they can use Items or Skills to make rolls easier. It is up to you to judge if these Skills or Items apply. All of these concepts will be explored in more detail in the sections below.");
            ///// ///// Stats
            RulePage fiveStats = new RulePage("The Five Stats", "\tEach character has five Stats that define them: " + str + ", " + dex + ", " + wis + ", " + cha + ", and " + wil + ". " + wil + " is a resource that can be depleted, but cannot be used for a Stat Check. The other four can be used for Stat Checks. Use the guidelines below to decide which Stat Check should be made for an action:" + 
                                             "\n\tUse " + str + " Checks for actions based on strength, speed, and fortitude. Examples include lifting heavy objects, throwing a punch, winning a short race, enduring a long distance run, and resisting the effects of a drug or poison." + 
                                             "\n\tUse " + dex + " checks for actions involving skill, precision, or muscle memory. " + dex + " checks include dodging attacks, feats of acrobatics, and making a quick reaction, as well as actions such as sketching, sewing, or working with mechanics." +
                                             "\n\tUse " + wis + " checks for actions involving logic, creativity, or investigation. A " + wis + " check could be solving a puzzle, memorizing a complicated pattern, or hacking into a computer. In can also represent searching an area for an item or clue, or noticing changes or movements in your surrounding." + 
                                             "\n\tUse " + cha + " Checks for social interaction. " + cha + " Checks can represent persuading, deceiving, or befriending another person. Additionally, Social Checks can be used to attempt to read social cues or understand what someone else is thinking or feeling.");
            ///// ///// Success and Failure
            RulePage successFailure = new RulePage("Success and Failure", "\tWhen players roll for a Stat Check, there are five possible outcomes: Utter Failure, Failure, Partial Success, Success, and Great Success. Your Main Game Master screen provides guidelines for the results of the action depending on how successful of an outcome the Player rolls. The screen only displays the results of one outcome at a time (Partial Success by default). You can toggle between different outcomes by tapping the buttons marked ‘UF’ (Utter Failure), ‘F’ (Failure), ‘PS’ (Partial Success), ‘S’ (Success), and ‘GS’ (Great Success). When not in conflict, the risks and rewards of Stat Checks are very low. During a conflict, the results depend on the Level of Risk. The changing risk is reflected on your Main Game Master screen, which will suggest different result depending on the Risk. For more details on Conflict, Risk, and Escalation, see the section on Conflict.");
            ///// ///// Modifiers
            RulePage gmModifiers = new RulePage("Modifiers", "\tWhen players attempt a Stat Check, their outcome may be influenced by Modifiers. Positive Modifiers are beneficial to the Players while negative Modifiers are detrimental. You can reward or require Modifiers when the circumstances in the game world give the player a clear advantage or disadvantage. For example, if the players are in a bar fight, and an enemy has just gotten water splashed in their face, a player might get a +1 Modifier to try and punch the enemy. If a player had gotten splashed instead of an enemy, that player may get a -1 Modifier to their next Check. Modifiers greater than +1 should be saved for extraordinary circumstances, if used at all." +
                                               "\n\tPlayers may have Abilities or Conditions that affect their Checks. If you decide an Ability or Condition applies to a Check, that Modifier will apply in addition to any Modifier the player already has. Items and Skills also stack on top of these Modifiers. A Stat Check can never have a Modifier of greater than +3 or less than -3.");
            ///// ///// Items and Skills
            RulePage gmItemsSkills = new RulePage("Items and Skills","\tPlayers may try to use Items and Skills to Modify their Stat Checks. The player will describe how they intend to use their Item or Skill to help with the action they’re attempting. You must decide if their Item or Skill would reasonably increase their chance of success. If you allow it, they may add the Item and/or Skill to their Check. Only one Item and one Skill can be used at a time. Try to encourage creativity; if the players find creative ways to apply their Skills and Items, they should be rewarded for it.");

			gmStatChecks.Add(fiveStats);
            gmStatChecks.Add(successFailure);
            gmStatChecks.Add(gmModifiers);
            gmStatChecks.Add(gmItemsSkills);
            ///// ///// ///// Conflict
            RulePage gmConflict = new RulePage("Conflict","\tA Conflict occurs when the Players must face and overcome a challenge or opposing force. A Conflict can represent a variety of situations. Some examples are: trying to convince someone to give up sensitive information, breaking into a safe before security arrives, interrogating a suspect, or winning a brawl. A Conflict Escalates over time, which causes the Level of Risk to rise. A Conflict ends when either the Players are able to Complete the Conflict’s Objective or all the Players have surrendered." +
                                              "\n\tPlayers take turns during a Conflict attempting to complete their Objective, or manage the Risk. Each time a Player takes an action during a Conflict, refer to the result guidelines for their Stat Check outcome and choose one option from the list as the result.");
            ///// ///// Starting a Conflict
            RulePage conflictStart = new RulePage("Starting Conflict","\tTo initiate a Conflict, tap Begin Conflict on the Main Game Master screen. A menu will appear allowing you to select a difficulty for the Conflict. The Difficulty decides how much effort the players must put in to complete the Conflict’s Objective. The Difficulty should reflect the actual difficulty of the Objective (Defusing a bomb is very difficult, sneaking through a room full of sleeping guards is not) as well as the importance of the Conflict to the plot and the characters. If a difficult Conflict has no relation to the story or the characters, it will feel like a waste of time, and drain the Players’ resources on something that doesn’t matter. It is also good practice to have challenges trend more difficult over time, to create a sense of rising action and stakes." +
                                                 "\n\tWhen a Conflict begins, allow the players to formulate a turn order for themselves, then allow them each to take a turn in this order until the Conflict has ended. A Player may attempt a Stat Check to perform an action, surrender, or pass on their turn.");
            ///// ///// Objectives
            RulePage gmObjectives = new RulePage("Objectives","\tA Conflict’s Objective is the goal the Players must achieve in order to end a Conflict. The Players’ progress towards completing an Objective is represented by the Objective Completion bar on the Main Game Master screen. When the Players in a Conflict take an action that could further their goal, you can add to the Objective Completion bar. Additionally, the penalty for failure can sometimes by loss of progress. Tap the ‘+’ or ‘-’ buttons underneath the Objective Completion bar to adjust the progress. Use the result guidelines for the Player’s outcome to determine how much to add to the Objective Completion. When the bar is full the Objective is complete and the Conflict ends. As the bar fills, you can clue the Players into the progress by describing the progress the characters have made in the game world. For example, if the Players are attempting to outrun some pursuers, their Objective is probably to escape. Describe how far away from their pursuers they are based on their Objective Completion." +
                                                "\n\tSometimes the Players will change the Objective in the middle of a Conflict. When this happens, end the current Conflict by tapping End Conflict. Then immediately start a new Conflict with an appropriate new Difficulty. Immediately Escalate the Conflict to the same Level of Risk of the Conflict that was interrupted.");
            ///// ///// Risk and Escalation
            RulePage gmRisk = new RulePage("Risk and Escalation", "\tEach Conflict has a Level of Risk. Risk represents the potential severity of Player failure during the Conflict. When not in Conflict, the Level of Risk is 0. Conflicts start with a Risk Level of 1, and Risk Level 4 is the highest Risk. Level of Risk increases by one each time the Escalation bar fills up." +
                                          "\n\tEach time a Player takes a turn during Conflict, add one to the Escalation bar by tapping the ‘+’ button below the Escalation bar. Players can attempt to slow escalation on their turn by making a Stat Check for an action that may reduce the Risk of a situation. If they are successful, you can subtract Escalation by tapping the ‘-’ button below the Escalation bar. Player failure may result in Escalation increasing. Refer to the result guidelines for the Player’s outcome in order to determine how much the Escalation rises or falls. When the Escalation bar is filled, the Level of Risk goes up by one. Let your Players know when the Level of Risk increases. The Level of Risk cannot be decreased until Conflict has ended. If the Risk Level is 4, Escalation cannot be reduced or increased." + 
                                          "\n\tIf any Player character uses any form of physical violence on another person, the Risk immediately increases to Risk level 2 if it is not already Level 2 or higher.");
            ///// ///// Aftermath
            RulePage aftermath = new RulePage("Aftermath", "\tWhen a Conflict ends, decide what happens based on how the Conflict ended. If the Players achieved their goal, the plot should move forward in a favorable way. Additionally, the Players should have some time to spend outside of Conflict, especially after a particularly Difficult or high Risk Conflict." +
                                             "\n\tIf the Players surrender, decide on consequences that fit the Conflict. Sometimes failure will just mean that the characters do not achieve their goal, and have to find another way. Other times, there might be more serious consequences. For example, if the Players are trying to sneak into a secure location, surrender could result in being captured or arrested." + 
                                             "\n\tTry to make the potential consequences obvious while the Players are in the Conflict, so they can make an informed decision when deciding whether or not to surrender.");
            
            gmConflict.Add(conflictStart);
            gmConflict.Add(gmObjectives);
            gmConflict.Add(gmRisk);
            gmConflict.Add(aftermath);
            ///// ///// ///// Conditions
            RulePage gmConditions = new RulePage("Conditions","\tWhen the result Guidelines suggest it, you may choose to give a player a Condition. Conditions are negative consequences from failure in Conflict that will make it more difficult for your character to progress. There are three levels of severity for Conditions: minor, major, and critical. Minor conditions are setbacks, but can be relieved by certain player Abilities and Items. Major conditions will make certain actions significantly more difficult, and are permanent. Critical conditions are extremely debilitating, and can even lead to death. Critical Conditions can only be given when the Risk is at 4." + 
                                                "\n\tTap on ‘Conditions’ on the bottom of the Game Master screen to see a list of all conditions. From there, you can view descriptions of each Condition by tapping on them. Choose a Condition of the severity given by the Guideline you chose. Try to find the Condition that best suits the situation. For example, if the Players are in some sort of fight or chase, it makes sense to use injury or fear Conditions, while if the players are in a stressful negotiation, it would make sense to give them despair or fatigue Conditions." +
                                                "\n\tConditions act as an incentive for players to manage the risk of escalation. Because they last beyond the scope of a single conflict, and increase the difficulty of taking actions, players will want to avoid them. You can decide how often to give Conditions in order to affect the difficulty and tone of the game.");
            ///// ///// ///// Abilities
            RulePage gmAbilities = new RulePage("Abilities","\tEach character has a special Ability at their disposal. Each Ability is different, so follow the text of the Ability and make a judgement accordingly. If an Ability requires the player to make a Stat Check, that Check is handled differently from a regular Stat Check. When a player rolls for an Ability Stat Check, ignore the result guidelines, and only pay attention to the text of the Ability. For the purposes of Ability Stat Checks, Success, Great Success, and Partial Success count as Success and anything else counts as Failure.");

            ///// ///// ///// Luck Rolls
            RulePage luckRolls = new RulePage("Luck Rolls","\tSometimes you will have to make decisions about the world that are unrelated to the character Stats or Abilities. In this case, you can make a Luck Roll. To make a Luck Roll, one twelve-sided die or use the digital die. If the result is seven or lower, make the decision that benefits the Players more.");

            runningTheGame.Add(gmBasics);
            runningTheGame.Add(setup);
            runningTheGame.Add(gmCharacters);
            runningTheGame.Add(gmStatChecks);
            runningTheGame.Add(gmConflict);
            runningTheGame.Add(gmConditions);
            runningTheGame.Add(gmAbilities);
            runningTheGame.Add(luckRolls);

            ruleBook.Add(playingTheGame);
            ruleBook.Add(runningTheGame);
		}
    }
}
